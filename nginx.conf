user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # this sets the maximum size information to be unlimited; it might
    # be better to set this to apply only to authenticated endpoints
    # (once people are authenticated I think we can allow them to send
    # things of unlimited size).
    client_max_body_size 0;

    # Main server configuration. See below for redirects.
    server {
        listen       ${HTTPS_PORT} ssl;
        server_name  localhost  ${HTTP_HOST};

        # Certificate
        ssl_certificate      /run/proxy/certificate.pem;
        ssl_certificate_key  /run/proxy/key.pem;

        # SSL settings as recommended by this blog:
        # https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_dhparam /run/proxy/dhparam.pem;

        # https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/
        # > HSTS seeks to deal with the potential vulnerability by
        # > instructing the browser that a domain can only be accessed
        # > using HTTPS. Even if the user enters or follows a plain
        # > HTTP link, the browser strictly upgrades the connection to
        # > HTTPS:
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # https://content-security-policy.com/
        add_header Content-Security-Policy "default-src 'self';";

        # config to don't allow the browser to render the page inside
        # an frame or iframe and avoid click jacking
        # http://en.wikipedia.org/wiki/Clickjacking if you need to
        # allow [i]frames, you can use SAMEORIGIN or even set an uri
        # with ALLOW-FROM uri
        # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
        add_header X-Frame-Options SAMEORIGIN;

        # when serving user-supplied content, include a
        # X-Content-Type-Options: nosniff header along with the
        # Content-Type: header, to disable content-type sniffing on
        # some browsers.
        # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
        # currently suppoorted in IE > 8
        # http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
        # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
        # 'soon' on Firefox
        # https://bugzilla.mozilla.org/show_bug.cgi?id=471020
        add_header X-Content-Type-Options nosniff;

        # https://scotthelme.co.uk/a-new-security-header-referrer-policy/
        add_header Referrer-Policy strict-origin;

        root /usr/share/nginx/html;

        location / {
            proxy_pass http://${SERVICE}/;
        }
    }

    # Redirect all http requests to the SSL endpoint and the correct domain name
    server {
        listen ${HTTP_PORT} default_server;
        listen [::]:${HTTP_PORT} default_server;
        server_name _;

        location / {
            return 301 https://${HTTP_HOST}:${HTTPS_PORT}$request_uri;
        }
    }
}
